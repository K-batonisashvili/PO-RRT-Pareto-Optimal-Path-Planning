Metadata-Version: 2.4
Name: PO_RRT_STAR
Version: 0.0.0
Summary: Pareto-Optimal RRT* Framework
Author-email: Kote Batonisashvili <kbat6359@bu.edu>
Project-URL: homepage, https://github.com/K-batonisashvili/PO-RRT-Pareto-Optimal-Path-Planning
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: matplotlib
Requires-Dist: numpy
Requires-Dist: pytest
Requires-Dist: pytest-cov
Requires-Dist: scipy
Dynamic: license-file

# PO-RRT*: Pareto Optimal RRT* Path Planning Algorithm
Main repo for novel RRT* Algorithm which focuses on Pareto-optimized safety definitions Our main code can be found under the `src` folder. Several tests were created for benchmarking and validation under the `tests` folder. You may directly download the python file `PO-RRT_star_occupancy.py` and run it locally on your machine, or for an in-depth tutorial, please look through the `setup_guide.ipynb` jupyter notebook on setting up a virtual conda environment, cloning this github repo, running the tests, and finally the main code. 





# Introduction

Multi-objective path planning has been the subject of recent investigation in academia and private research alike. With our nonlinear world providing more obstacles and more variables to take into consideration, new algorithms and proposals are submitted as potential solutions. Unfortunately when working with autonomous agents, safety is often overlooked in favor of efficiency and optimization. To provide more trust in human-robot interaction, an active communication channel between the autonomous agent and human must exist for interchange of data, debate, and agreement. With most state-of-the-art research encompassing risk as a subset of the cost function, the explicit focus on safety is reduced to a weighted part of a whole. In this Github repo, we present a novel algorithm which focuses on separating safety from the overall cost function during autonomous path planning and explicitly calculate it via Pareto-Dominance it at each time step.

## Problem Formulation
We formulate this idea of co-dependent path selection as a multi-objective problem, where our primary goal lies in explicitly measuring environmental uncertainty, followed by cost minimization. We discretize our given environment with an occupancy grid, where known and unknown areas of our workspace are assigned a probability of being occupied. While the overall environment definition and selection is situational, our agentâ€™s traversal distance is determined by the defined environmental resolution and assigned step size. This travel distance provides the foundation to the overall calculation of path failure and cost. We generate paths using a modified RRT* algorithm which rewires neighboring nodes depending on Pareto dominance. Through this, we are guaranteed to have multiple routes for our agent to choose from to reach a desired location. 


## Pareto-Dominance

Since we are detaching our probability of failure from the overall cost function, our agent takes on an augmented state with additional dimensions. With this detached probability of failure, we are no longer guaranteed to have one optimal path that dominates others. Instead, we perform Pareto dominance checks based on failure and cost. An example plot of what this might look like can be seen in the image below, where our multi-objective problem is split into probability of failure on the Y axis, and our cost function similarly on the X. The dotted lines represent the dominance region that each node (or in our case the nodes represent paths) contains, where if other paths fall within the rectangular region, they will be dominated. This way, there is a "front" that is generated by paths which are low in cost, and low in probability of failure. 


![Pareto-Front-Plot](./imgs/Pareto-Optimality.png)


We say that a potential path Pareto dominates another if and only if the following conditions are met:
![Pareto-Dominance-EQs](./imgs/Pareto-Dominance-Eqs.PNG)

Following the logic of 1, we are presented with paths that are either lower in cost but have the same probability of failure, paths that are lower in probability of failure but the same cost, or lower in both. While a Pareto-optimal path dominates certain others, it will never dominate another Pareto-optimal path as the objective conditions are dependent on overall goals. To visualize this, we can look back at 1 where there are certain paths that are may dominate others in cost, but not in their probability of failure. This criterion would allow for the generation of multiple dominant paths that may be transferred to the human counterpart for further analysis based on aforementioned goals.
